/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CityIndexRouteImport } from './routes/city/index'
import { Route as CityCityIdRouteImport } from './routes/city/$city-id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CityIndexRoute = CityIndexRouteImport.update({
  id: '/city/',
  path: '/city/',
  getParentRoute: () => rootRouteImport,
} as any)
const CityCityIdRoute = CityCityIdRouteImport.update({
  id: '/city/$city-id',
  path: '/city/$city-id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/city/$city-id': typeof CityCityIdRoute
  '/city': typeof CityIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/city/$city-id': typeof CityCityIdRoute
  '/city': typeof CityIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/city/$city-id': typeof CityCityIdRoute
  '/city/': typeof CityIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/city/$city-id' | '/city'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/city/$city-id' | '/city'
  id: '__root__' | '/' | '/city/$city-id' | '/city/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CityCityIdRoute: typeof CityCityIdRoute
  CityIndexRoute: typeof CityIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/city/': {
      id: '/city/'
      path: '/city'
      fullPath: '/city'
      preLoaderRoute: typeof CityIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/city/$city-id': {
      id: '/city/$city-id'
      path: '/city/$city-id'
      fullPath: '/city/$city-id'
      preLoaderRoute: typeof CityCityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CityCityIdRoute: CityCityIdRoute,
  CityIndexRoute: CityIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
